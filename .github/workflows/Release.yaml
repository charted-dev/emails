# üêª‚Äç‚ùÑÔ∏èüíå email-service: charted's email service built in Rust that can be connected via gRPC
# Copyright 2023 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release Pipeline
on:
    release:
        types: [released]
jobs:
    archives:
        name: Archives [${{matrix.prettyName}}]
        runs-on: ${{matrix.runner}}
        strategy:
            fail-fast: true
            matrix:
                include:
                    - runner: ubuntu-latest
                      prettyName: "Linux (x64)"
                      os: linux
                      arch: x86_64
                      target: "x86_64-unknown-linux-gnu"
                      extension: ""
                    - runner: self-hosted
                      prettyName: "Linux (aarch64)"
                      os: linux
                      arch: aarch64
                      target: "aarch64-unknown-linux-gnu"
                      extension: ""
                    - runner: macos-latest
                      prettyName: "macOS (x64)"
                      os: darwin
                      arch: x86_64
                      target: "x86_64-apple-darwin"
                      extension: ""
                    - runner: macos-latest
                      prettyName: "macOS (aarch64)"
                      os: darwin
                      arch: aarch64
                      target: "aarch64-apple-darwin"
                      extension: ""
                    - runner: windows-latest
                      prettyName: "Windows (x64)"
                      os: windows
                      arch: x86_64
                      target: "x86_64-pc-windows-msvc"
                      extension: ".exe"
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
              with:
                submodules: recursive

            - name: Setup Rust toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                toolchain: stable
                target: ${{matrix.target}}

            - name: Setup Rust cache
              uses: Swatinem/rust-cache@v2

            - name: Setup protoc
              uses: Noelware/setup-protoc@1.2.0

            - name: Build release binary
              run: cargo build --release --target=${{matrix.target}}

            - name: Upload artifact to workflow
              uses: actions/upload-artifact@v4
              with:
                path: ./target/${{matrix.target}}/release/emails${{matrix.extension}}
                name: emails-${{matrix.os}}-${{matrix.arch}}${{matrix.extension}}

#       - name: Build release binary
#         run: cargo build --release --target=${{matrix.dist.target}}

#       - name: Upload artifact to workflow
#         uses: actions/upload-artifact@v3
#         with:
#           name: emails-${{matrix.dist.os}}-${{matrix.dist.arch}}${{matrix.dist.ext}}
#           path: ./target/${{matrix.dist.target}}/release/emails${{matrix.dist.ext}}

#       - name: Create appropriate path name for release artifact
#         run: cp ./target/${{matrix.dist.target}}/release/emails${{matrix.dist.ext}} ./target/${{matrix.dist.target}}/release/emails-${{matrix.dist.os}}-${{matrix.dist.arch}}${{matrix.dist.ext}}

#       - name: Upload artifact to release
#         uses: softprops/action-gh-release@v1
#         with:
#           files: ./target/${{matrix.dist.target}}/release/emails-${{matrix.dist.os}}-${{matrix.dist.arch}}${{matrix.dist.ext}}

#       - name: Upload artifacts to Noelware's Artifact Registry
#         uses: Noelware/s3-action@2.1.0
#         with:
#           enforce-path-access-style: true
#           files: ./target/${{matrix.dist.target}}/release/emails${{matrix.dist.ext}}
#           path-format: $(prefix)/charted/emails/${{steps.tag.outputs.version}}/email-service-${{matrix.dist.os}}-${{matrix.dist.arch}}${{matrix.dist.ext}}
#           access-key-id: ${{secrets.S3_ACCESS_KEY}}
#           secret-key: ${{secrets.S3_SECRET_KEY}}
#           endpoint: ${{secrets.S3_ENDPOINT}}
#           prefix: /noelware/artifacts
#           bucket: august

#       - name: Upload artifacts to Noelware's Artifact Registry [latest]
#         uses: Noelware/s3-action@2.1.0
#         with:
#           enforce-path-access-style: true
#           files: ./target/${{matrix.dist.target}}/release/emails${{matrix.dist.ext}}
#           path-format: $(prefix)/charted/emails/latest/email-service-${{matrix.dist.os}}-${{matrix.dist.arch}}${{matrix.dist.ext}}
#           access-key-id: ${{secrets.S3_ACCESS_KEY}}
#           secret-key: ${{secrets.S3_SECRET_KEY}}
#           endpoint: ${{secrets.S3_ENDPOINT}}
#           prefix: /noelware/artifacts
#           bucket: august
#   docker-x64:
#     name: Build Docker image (x86_64)
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#         with:
#           submodules: recursive

#       - name: Get current release tag
#         uses: auguwu/git-tag-action@master
#         id: tag

#       - name: Get commit hash
#         id: commit-hash
#         run: echo "::set-output name=commit::$(git rev-parse --short=8 $GITHUB_SHA)"

#       - name: Setup Docker buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Setup QEMU
#         uses: docker/setup-qemu-action@v2

#       - name: Login into GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: charted-dev
#           password: ${{secrets.GITHUB_TOKEN}}

#       - name: Build and push [Debian, linux/amd64]
#         uses: docker/build-push-action@v4
#         with:
#           platforms: linux/amd64
#           context: .
#           file: ./distribution/docker/debian/Dockerfile
#           cache-from: type=gha,scope=debian-amd64
#           cache-to: type=gha,scope=debian-amd64
#           provenance: false
#           push: true
#           labels: |
#             org.opencontainers.image.title=charted-emails
#             org.opencontainers.image.description=üêª‚Äç‚ùÑÔ∏èüíå charted's email service built in Rust that can be connected via gRPC
#             org.opencontainers.image.version=${{steps.tag.outputs.version}}
#             org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
#             org.opencontainers.image.licenses=MIT
#             org.opencontainers.image.documentation=https://charts.noelware.org/docs/services/emails/${{steps.tag.outputs.version}}
#             org.opencontainers.image.source=https://github.com/charted-dev/email-service
#           tags: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-amd64,
#             ghcr.io/charted-dev/email-service:latest-amd64

#       - name: Build and push [Alpine, linux/amd64]
#         uses: docker/build-push-action@v4
#         with:
#           platforms: linux/amd64
#           context: .
#           file: ./distribution/docker/alpine/Dockerfile
#           push: true
#           cache-from: type=gha,scope=alpine-amd64
#           cache-to: type=gha,scope=alpine-amd64
#           provenance: false
#           labels: |
#             org.opencontainers.image.title=charted-emails
#             org.opencontainers.image.description=üêª‚Äç‚ùÑÔ∏èüíå charted's email service built in Rust that can be connected via gRPC
#             org.opencontainers.image.version=${{steps.tag.outputs.version}}
#             org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
#             org.opencontainers.image.licenses=MIT
#             org.opencontainers.image.documentation=https://charts.noelware.org/docs/services/emails/${{steps.tag.outputs.version}}
#             org.opencontainers.image.source=https://github.com/charted-dev/email-service
#           tags: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-alpine-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-alpine-amd64,
#             ghcr.io/charted-dev/email-service:latest-alpine-amd64
#   docker-arm:
#     name: Build Docker image (ARM64)
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#         with:
#           submodules: recursive

#       - name: Get current release tag
#         uses: auguwu/git-tag-action@master
#         id: tag

#       - name: Get commit hash
#         id: commit-hash
#         run: echo "::set-output name=commit::$(git rev-parse --short=8 $GITHUB_SHA)"

#       - name: Setup Docker buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Setup QEMU
#         uses: docker/setup-qemu-action@v2

#       - name: Login into GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: charted-dev
#           password: ${{secrets.GITHUB_TOKEN}}

#       - name: Build and push [Debian, linux/arm64]
#         uses: docker/build-push-action@v4
#         with:
#           platforms: linux/arm64
#           context: .
#           file: ./distribution/docker/debian/Dockerfile
#           push: true
#           cache-from: type=gha,scope=debian-arm64
#           cache-to: type=gha,scope=debian-arm64
#           provenance: false
#           labels: |
#             org.opencontainers.image.title=charted-emails
#             org.opencontainers.image.description=üêª‚Äç‚ùÑÔ∏èüíå charted's email service built in Rust that can be connected via gRPC
#             org.opencontainers.image.version=${{steps.tag.outputs.version}}
#             org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
#             org.opencontainers.image.licenses=MIT
#             org.opencontainers.image.documentation=https://charts.noelware.org/docs/services/emails/${{steps.tag.outputs.version}}
#             org.opencontainers.image.source=https://github.com/charted-dev/email-service
#           tags: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-arm64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-arm64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-arm64,
#             ghcr.io/charted-dev/email-service:latest-arm64

#       - name: Build and push [Alpine, linux/arm64]
#         uses: docker/build-push-action@v4
#         with:
#           platforms: linux/arm64
#           context: .
#           file: ./distribution/docker/alpine/Dockerfile
#           push: true
#           cache-from: type=gha,scope=alpine-arm64
#           cache-to: type=gha,scope=alpine-arm64
#           provenance: false
#           labels: |
#             org.opencontainers.image.title=charted-emails
#             org.opencontainers.image.description=üêª‚Äç‚ùÑÔ∏èüíå charted's email service built in Rust that can be connected via gRPC
#             org.opencontainers.image.version=${{steps.tag.outputs.version}}
#             org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
#             org.opencontainers.image.licenses=MIT
#             org.opencontainers.image.documentation=https://charts.noelware.org/docs/services/emails/${{steps.tag.outputs.version}}
#             org.opencontainers.image.source=https://github.com/charted-dev/email-service
#           tags: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine-arm64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-alpine-arm64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-alpine-arm64,
#             ghcr.io/charted-dev/email-service:latest-alpine-arm64
#   manifests:
#     name: Merge manifests
#     runs-on: ubuntu-latest
#     needs: [docker-x64, docker-arm]
#     steps:
#       - name: Get current release tag
#         uses: auguwu/git-tag-action@master
#         id: tag

#       - name: Login into GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: charted-dev
#           password: ${{secrets.GITHUB_TOKEN}}

#       - name: Merge Debian [latest] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:latest
#           images: |
#             ghcr.io/charted-dev/email-service:latest-amd64,
#             ghcr.io/charted-dev/email-service:latest-arm64

#       - name: Merge Debian [${{steps.tag.outputs.major}}] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}
#           images: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-arm64

#       - name: Merge Debian [${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}
#           images: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-arm64

#       - name: Merge Debian [{{steps.tag.outputs.version}}] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}
#           images: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-arm64

#       - name: Merge Alpine [latest] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:alpine
#           images: |
#             ghcr.io/charted-dev/email-service:alpine-amd64,
#             ghcr.io/charted-dev/email-service:alpine-arm64

#       - name: Merge Alpine [${{steps.tag.outputs.major}}] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-alpine
#           images: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-alpine-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}-alpine-arm64

#       - name: Merge Debian [${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine
#           images: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine-arm64

#       - name: Merge Debian [{{steps.tag.outputs.version}}] images
#         uses: Noelware/docker-manifest-action@0.3.1
#         with:
#           push: true
#           inputs: ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-alpine
#           images: |
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-alpine-amd64,
#             ghcr.io/charted-dev/email-service:${{steps.tag.outputs.version}}-alpine-arm64
#   deploy:
#     name: Deploy to Noelware's infrastructure
#     runs-on: ubuntu-latest
#     needs: [manifests]
#     steps:
#       - name: Get current release tag
#         uses: auguwu/git-tag-action@master
#         id: tag

#       - name: Create kubeconfig
#         run: mkdir ~/.kube && echo "${{secrets.KUBECONFIG}}" >> ~/.kube/config

#       - name: Rollout image
#         run: kubectl set image deployment/charted-emails emails=ghcr.io/charted-dev/email-service:{{steps.tag.outputs.version}}-alpine --namespace noelware

#       - name: Wait for completion
#         run: kubectl rollout status deployment/charted-emails
